#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable

#include "light.h"

struct Node {
	vec4  min;
	vec4  max;
	ivec4 data;
};

// TODO Fixed Vertexes stride

struct VertexPack {
    /*vec4 data0; // Pos (xyz), normal.x
    vec4 data1; // Normal yz , uv
    vec4 data2; // Tangent xyz BiTangent X
    vec2 data3;*/
    float data[14];
};

struct Vertex {
    vec3 pos;
    vec3 normal;
    vec2 uv;
    vec3 tangent;
    vec3 binormal;
};

layout (local_size_x = 8, local_size_y = 8) in;

// Output Image
layout (set=0,binding = 0, rgba8) uniform image2D resultImage;
// BVH
layout (set=1,binding = 0) buffer nodeData {
	Node nodes[];
};
// Camera Data
layout (set=0,binding = 1) uniform CameraData {
	vec4  pos;
	vec4  look;
	vec4  up;
	vec4  right;
	ivec4 data;
} camera;
// Vertex Buffer
layout (set=2,binding=0) buffer vertexData {
    VertexPack vertexes[];
};
// Index Buffer
layout (set=3,binding=0) buffer indexData {
    uint indexes[];
};

struct Ray {
	vec3 org;
	vec3 dir;
};

Ray cameraRay(ivec2 pixel) {
	float width  = camera.data.x;
	float height = camera.data.y;

	float normalized_i = (pixel.x / width) - 0.5;
	float normalized_j = (pixel.y / height) - 0.5;
	normalized_j *= (height/width);
	vec3 image_point = normalized_j*camera.right.xyz +
						normalized_i*camera.up.xyz
						 + camera.look.xyz;
	vec3 ray_direction = image_point;

	Ray r;
	r.org = camera.pos.xyz;
	r.dir = ray_direction;
	return r;
}

struct RayHit {
	float tmax;
	float tmin;
	bool  status;

	vec3 bc;
	int  id1;
};

struct Point {
    vec3 pos;
    vec3 normal;
    vec2 uv;
};

#define MAX_STACK 16
#define MAX_DIST  100000.0
#define RAY_MIN   0.01f

RayHit check(Node box,Ray ray){
	vec3 inv_dir = 1.0/ray.dir;

	vec3 lov = inv_dir*(box.min.xyz - ray.org);
	vec3 hiv = inv_dir*(box.max.xyz - ray.org);

    vec3 max_v = max(lov, hiv);
    vec3 min_v = min(lov, hiv);

	float tmin  = max(min_v.x,max(min_v.y,min_v.z));//reduce_max(min(lov, hiv));
	float tmax =  min(max_v.x,min(max_v.y,max_v.z));

	RayHit r;
	r.tmin = MAX_DIST;
	r.tmax = tmax;
	r.status = false;

	if(tmin <= tmax && (tmax > RAY_MIN)){
	    r.tmin   = tmin;
		r.status = true;
		return r;
	}
	return r;
}

struct Stack {
	int nodes[MAX_STACK];
	int top;
} stack;

RayHit intersect(const Ray ray, const vec3 v0, const vec3 v1, const vec3 v2) {
    vec3 e1 = v1 - v0;
    vec3 e2 = v2 - v0;
    // Calculate planes normal vector
    vec3 pvec = cross(ray.dir, e2);
    float det = dot(e1, pvec);

    RayHit hit;
    hit.status = false;
    hit.tmin = MAX_DIST;
    hit.bc = vec3(-1.f);

    // Ray is parallel to plane
    if (abs(det) < 1e-8) {
        return hit;
    }

    float inv_det = 1 / det;
    vec3 tvec = ray.org - v0;
    float u = dot(tvec, pvec) * inv_det;
    if (u < 0.0f || u > 1.0f) {
        return hit;
    }

    vec3 qvec = cross(tvec, e1);
    float v = dot(ray.dir, qvec) * inv_det;
    if (v < 0.0f || u + v > 1.0f) {
        return hit;
    }
    hit.tmin = dot(e2, qvec) * inv_det;
    hit.status = true;
    hit.bc = vec3(u,v,1.0f-u-v);
    return hit;
}

void add_stack(int id){
    if(stack.top < MAX_STACK-1){
        stack.nodes[++stack.top] = id;
    }
}

Vertex convert(VertexPack pack){
	Vertex v;
	v.pos = vec3(pack.data[0],pack.data[1],pack.data[2]);
	v.normal = vec3(pack.data[3],pack.data[4],pack.data[5]);
	v.uv = vec2(pack.data[6],pack.data[7]);
	v.tangent = vec3(pack.data[8],pack.data[9],pack.data[10]);
	v.binormal = vec3(pack.data[11],pack.data[12],pack.data[13]);
	return v;
}

RayHit trace(Ray ray){
	// Check root, if not return
	int rootID = camera.data.w;
	RayHit hit = check(nodes[rootID],ray);
	if(!hit.status)return hit;

    hit.status = false;
	hit.tmin   = MAX_DIST;

	stack.nodes[0] = rootID;
	stack.top = 0;

    RayHit test;Node curr;
    int currId;
    // Max steps for debug
    uint step = 0;
	while(stack.top >= 0/* && step < 100*/){
	    step++;
		// Get Top element from stack
		currId = stack.nodes[stack.top--];
		curr  = nodes[currId];

		if(curr.max.w == 1.0f){ // Leaf
		    // Check triangles
            test = check(curr,ray);
            if(test.tmin < hit.tmin){
                ivec4 triIds = curr.data;
                for(int i = 0;i<4;++i){
                    int triId = triIds[i];
                    if(triId >= 0){
                        Vertex vp0 = convert(vertexes[indexes[triId+0]]);Vertex vp1 = convert(vertexes[indexes[triId+1]]);Vertex vp2 = convert(vertexes[indexes[triId+2]]);
                        test = intersect(ray,vp0.pos,vp1.pos,vp2.pos);
                        if(test.tmin < hit.tmin){
                            hit = test;
                            hit.id1 = triId;
                            //break;
                        }
                    }
                }
            }
		} else {
		    // Check left and right child
            int leftID  = curr.data.x;
            int rightID = curr.data.y;

            RayHit left = check(nodes[leftID],ray);
            RayHit right = check(nodes[rightID],ray);

            bool leftStatus  = left.tmin < hit.tmin;
            bool rightStatus = right.tmin < hit.tmin;

            if(leftStatus && rightStatus){
                // Left child always neares, if not swap
                if(right.tmin < left.tmin){
                    int tmp = leftID;
                    leftID  = rightID;
                    rightID = tmp;
                }
                add_stack(rightID);
                add_stack(leftID); // Left ID at top
            } else if(leftStatus)add_stack(leftID);
              else if(rightStatus)add_stack(rightID);
		}

	}
	return hit;
}

Point postIntersect(RayHit hit,Ray ray){
    int triId = hit.id1;
    Vertex vp0 = convert(vertexes[indexes[triId+0]]);Vertex vp1 = convert(vertexes[indexes[triId+1]]);Vertex vp2 = convert(vertexes[indexes[triId+2]]);
    vec3 n0 = vp0.normal; vec3 n1 = vp1.normal; vec3 n2 = vp2.normal;
    vec2 u0 = vp0.uv; vec2 u1 = vp1.uv; vec2 u2 = vp2.uv;
    Point p;
    p.pos    = ray.org+ray.dir*hit.tmin;
    p.normal = normalize(hit.bc.x*n0+hit.bc.y*n1+hit.bc.z*n2);
    if(dot(-ray.dir,p.normal) < 0.0f){
        p.normal = -p.normal;
    }
    p.uv     = hit.bc.x*u0+hit.bc.y*u1+hit.bc.z*u2;
    return p;
}

void main() {
    ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.xy);
    if(pixelCoord.x >= camera.data.x || pixelCoord.y >= camera.data.y)return;
	Ray ray = cameraRay(pixelCoord);

	const float lightDist = 10000.0;

	vec3 lightPos[6] = {
	    vec3(0.0f,lightDist,0.0f),
	    vec3(0.0f,-lightDist,0.0f),
	    vec3(lightDist,0.0f,0.0f),
	    vec3(-lightDist,0.0f,0.0f),
	    vec3(0.0f,0.0f,lightDist),
	    vec3(0.0f,0.0f,-lightDist)
	};

	RayHit hit = trace(ray);
	vec4 color = vec4(0.0f);
    if(hit.status){
        Point p = postIntersect(hit,ray);
        vec3 lightColor = vec3(0.0f);
        for(int i = 0;i<6;++i){
    	    lightColor = lightColor+light(lightPos[i],p.normal,ray.org,p.pos,0.1f,0.33f,vec3(1.0, 0.86, 0.56));
    	}
    	color = vec4(lightColor,1.0f);
    }

	imageStore(resultImage,ivec2(gl_GlobalInvocationID.xy),color);
}